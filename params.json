{"name":"Lambda Behave","tagline":"A modern testing and behavioural specification framework for Java 8","body":"### Introduction\r\n\r\nIf you're a Java developer and you've seen the fluent, modern specification frameworks available in other programming languages such as spock or jasmine then Lambda Behave is for you. Its goal is to make testing a more pleasant experience than it currently is with junit.\r\n\r\nThe [changelog](https://raw.githubusercontent.com/RichardWarburton/lambda-behave/master/CHANGELOG.md) explains what features have been added in each release.\r\n\r\n### Fluent Specifications\r\n\r\nThe Lambda Behave Specification design has several goals in mind:\r\n\r\n* To read like plain English.\r\n* To encourage describing tests using long and descriptive sentences, rather than a few words.\r\n* An API that is fluent and discoverable nearly entirely through IDE auto-completion.\r\n\r\n```\r\npublic class StackSpec {{\r\n\r\n    Stack<Integer> stack = new Stack<>();\r\n\r\n    describe(\"a stack\", it -> {\r\n\r\n        it.shouldSetup(stack::clear);\r\n\r\n        it.shouldTearDown(stack::clear);\r\n\r\n        it.should(\"be empty when created\", expect -> {\r\n            expect.that(stack).isEmpty();\r\n        });\r\n```\r\n\r\nThere are many, many, expectations builtin to the framework - not just `isEmpty()`. \r\n\r\nEvery specification suite starts its declaration using the `Suite.describe` method. From that point onwards your IDE should be able to auto-complete the domain specific language for declaring specifications, but just in case you want more information, here's the details.\r\n\r\n* If you want to specify a property about your system use `it.should`.\r\n* If you want describe an expectation of that property, use `expect.that`. This will get you to a fluent API restricted to the type of value that you're making the expectation about. The expectation system is based upon hamcrest. Lambda Behave doesn't compromise the ability to compose matchers in favour of fluency - if you want to compose in more complex flavours simply use `expect.that(value).is()` and then you can use regular Hamcrest matchers. In my experience this is a rare, albeit useful, breakout option.\r\n* If you want to setup or teardown data before or after each specification use `it.shouldSetup` and `it.shouldTearDown`.\r\n* If you want to setup or teardown data before or after each suite use `it.shouldInitialize` and `it.shouldComplete`.\r\n* Don't worry - I know some Java 8 lambdafied APIs don't deal with exceptions very well but you can throw exceptions in all our callbacks and the appropriate error will be reported, not just break the library.\r\n\r\n### Data Driven Specifications\r\n\r\nThe ability to parametrise specifications by different data inputs.\r\nData driven tests in TestNG or the `@Parameterized` junit annotation perform a similar task. \r\n`@Parameterized` only parameterises at the level of a class, whereas Lambda Behave parameterises at the level of a specification. \r\n\r\n```\r\ndescribe(\"a pair of numbers\", it -> {\r\n    it.uses(2, 4)\r\n      .and(4, 8)\r\n      .toShow(\"%d / %d is two\", (expect, x, y) -> {\r\n          expect.that(y / x).is(2);\r\n      });\r\n});\r\n```\r\n\r\nThe API in Lambda Behave is both fluent and also type safe and doesn't rely on reflection magic.\r\nThe `uses` method is overloaded to allow a different number of columns of data to be used. It also supports taking\r\nstreams or lists of data as its inputs, rather than explicitly chaining individual values.\r\n\r\nNot only is the specification parameterised by the data, but the description is also parameterised, its name being interpreted as a format `String`. \r\nThe aforementioned test would output the following:\r\n\r\n```\r\na pair of numbers\r\n  2 / 4 is two\r\n  8 / 4 is two\r\n```\r\n### Generated Specifications\r\n\r\nLambda Behave can automatically generate testcases for your to test your code with, similar to quick check or scala check.\r\nThe Fluent API for this is similar to data driven specifications allows for control over the way that the values are generated\r\nand how many need to be generated. Here is an example of how to show that reversing a `String` twice returns the same `String`\r\nusing randomly generated test case values.\r\n\r\n```\r\nit.requires(10)\r\n  .example(asciiStrings())\r\n  .toShow(\"reversing a String twice returns the original String\", (expect, str) -> {\r\n      String same = new StringBuilder(str).reverse().reverse().toString();\r\n      expect.that(same).isEqualTo(str);\r\n  });\r\n```\r\n\r\nAll generated specifications follow this common pattern where;\r\n\r\n * The `require` clause expresses how many values to generate,\r\n * The `example` clause states what type of objects to generate and how to generate them, This is overloaded to allow multiple columns of testcase values to be generated.\r\n * The `toShow` clause behaves like a `toShow` clause for a data drive spec. It is type safe against the the different columns.\r\n So in the above example the paramter `str` will have had its type correctly inferred as `String`. \r\n\r\n### Downloading Lambda Behave\r\n\r\nIf you're using a maven project then you can download Lambda Behave using the following pom entry.\r\n\r\n```\r\n<dependency>\r\n    <groupId>com.insightfullogic</groupId>\r\n    <artifactId>lambda-behave</artifactId>\r\n    <version>0.2</version>\r\n    <scope>test</scope>\r\n</dependency>\r\n```\r\n\r\nIf you're using a gradle project then you can use:\r\n\r\n```\r\ntestCompile group: 'com.insightfullogic', name: 'lambda-behave', version: '0.2'\r\n```\r\n\r\nThere's also an [example project](https://github.com/RichardWarburton/lambda-behave-examples).\r\n\r\n### Junit Integration\r\n\r\nLambda Behave also offers a junit runner. This lets you easily integrate into existing your existing test suite, or the tests via an Eclipse, Intellij, Netbeans, Maven, Gradle or Ant. You just add an annotation to enable this,\r\nand it can be run through your normal tooling.\r\n\r\n```\r\n@RunWith(JunitSuiteRunner.class)\r\npublic class StackSpec {{\r\n```\r\n\r\n### Lambdas - what the hell are they?\r\n\r\nConveniently I've written a [book](http://shop.oreilly.com/product/0636920030713.do?cmp=af-prog-books-videos-product_cj_9781491900154_%25zp') on Lambda expressions in Java 8 and the cleaner code they enable!\r\n\r\n### More Details\r\n\r\nOver time [The wiki](https://github.com/RichardWarburton/lambda-behave/wiki) will be fleshed out with more information including how-tos and guides.\r\n\r\n### How to contribute\r\n\r\nContributions are welcome and appreciated.\r\n\r\n * Patches should be submitted as [github pull requests](https://github.com/RichardWarburton/lambda-behave/pulls)\r\n * Issues should be filed via [the github project](https://github.com/RichardWarburton/lambda-behave/issues)\r\n * CI Build status: ![Build Status](https://travis-ci.org/RichardWarburton/lambda-behave.svg?branch=master)\r\n * A list of key authors and contributors can be found in [the authors file](https://raw.githubusercontent.com/RichardWarburton/lambda-behave/master/AUTHORS.md)\r\n\r\nHave fun!\r\n","google":"UA-25501442-1","note":"Don't delete this file! It's used internally to help with page regeneration."}